#!/usr/bin/python
# Curves force analysis software
# JWA (c)2009

# Find steps
from numpy import *
from curves import analyse

stepfind_version="0.1"

def stepfind(x,y,options):
    (steps, x, ey) = analyse.find_steps(x,y,
                                        w=options.width,
                                        stddevs=options.stddevs,
                                        peak_width=options.peakwidth,
                                        peak_height=options.peakheight,
                                        peak_amp=options.peakamp,
                                        invert=options.invert,
                                        step_thresh=options.stepheight)
    header(options)
    print_steps(steps)
    if options.edgeout != None:
        savetxt(options.edgeout,column_stack((x,ey)))

def header(o):
    print "# Finding steps using stencil width %d and %f standard deviations" % (o.width,o.stddevs)
    print "# Direction: ",
    if o.retract:
        print "Retract"
    else:
        print "Approach"
    if o.invert:
        print "# Deflection values inverted"

def print_steps(p):
    i = 1
    print "# Step\tZ\tHalf-height\tHeight\tWidth"
    for pk in p:
        print "%03d\t%.3f\t%.3f\t%.4f\t%.4f" % (i,pk[0],pk[1],pk[2],pk[3])
        i += 1

def config_option_parser():
    # Configure option parser
    parser = OptionParser(usage="%prog [options] file1 file2 ...",version="%prog "+stepfind_version)
    parser.add_option("-i", "--invert", action="store_true", default=False, help="invert curve")
    parser.add_option("-r", "--retract", action="store_true", default=True)
    parser.add_option("-a", "--approach", action="store_false", dest="retract")
    parser.add_option("-w", "--width", type="int", default=51, help="width of convolution stencil [51]")
    parser.add_option("-s", "--stddevs", type="float", default=4,help="number of standard deviations in Gaussian convolution function [4]")
    parser.add_option("-t", "--stepheight", type="float", help="step height threshold")
    parser.add_option("-W", "--peakwidth", type="float", default=10, help="maximum width of edge response peaks to find [1]")
    parser.add_option("-H", "--peakheight", type="float", default=.7, help="% height to test width of edge response peaks [.7]")
    parser.add_option("-A", "--peakamp", type="float", default=0.2, help="edge response peak height threshold (disabled by default)")
    parser.add_option("-o", dest="out", help="output filename")
    parser.add_option("-e", "--edgeout", dest="edgeout", help="edge response output filename")
    return parser

# Run
if __name__ == "__main__":
    import sys
    import os.path
    from optparse import OptionParser

    # Read command line options
    parser = config_option_parser()
    (options,args) = parser.parse_args()

    # Get input 
    if len(args)<1 or args[0] == "-":
        infile=sys.stdin
    elif os.path.isfile(args[0]):
        infile = args[0]
    else:
        print >> sys.stderr, "File %s doesn't exist" % args[0]
        sys.exit(-1)

    # Get output
    if options.out == None:
        outfile = sys.stdout
    else:
        outfile = open(options.out,'w')

    #data = loadtxt(infile)
    data = genfromtxt(infile,missing_values={1:'nan',2:'.0nan'})
    x = data[:,0]
    if options.retract:
        y = data[:,2]
    else:
        y = data[:,1]

    sys.stdout = outfile
    stepfind(x,y,options)
    if options.out != None:
        outfile.close()

